# RNA sequence: Nanoluciferase (used in OpenVaccine)

-constant_5_prime ACAUUUGCUUCUGACACAACUGUGUUCACUAGCAACCUCAAACAGACACC
-constant_3_prime GCUCGCUUUCUUGCUGUCCAAUUUCUAUUAAAGGUUCCUUUGUUCCCUAAGUCCAACUACUAAACUGGGGGAUAUUAUGAAGGGCCUUGAGCAUCUGGAUUCUGCCUAAUAAAAAACAUUUAUUUUCAUUGCAA
# Note: For long sequences the UTRs do not affect delta G and degscore as much. If you do not know exactly what UTRs the final mRNA will use it is fine to leave these flags blank.

# Sequence to optimize
-domain G MAVYPYDVPDYAGYPYDVPDYAGSYPYDVPDYAGSGVFTLEDFVGDWRQTAGYNLDQVLEQGGVSSLFQNLGVSVTPIQRIVLSGENGLKIDIHVIIPYEGLSGDQMGQIEKIFKVVYPVDDHHFKVILHYGTLVIDGVTPNMIDYFGRPYEGIAVFDGKKITVTGTLWNGNKIIDERLINPDGSLLFRVTINGVTGWRLCERILA* aa p
# Note 1: The first letter "G" just denotes the name of the domain. It can be any single letter. It is more important if you have multiple sequences you want to optimize side-by-side.
# Note 2: The final letter "p" biases the mutations in regions that are unpaired. I sometimes do not always run jobs with this extra option (can just delete and leave blank).

# Optimization criteria
-condition condition_1 degscore.min
# The numbering scheme is for multiple conditions but for our runs we typically only optimize under one score (usually degscore). Ribotree will automatically normalize the scores to the value computed for the initial root sequence. If you want to normalize the score to a specific value you can do -condition condition_1 [degscore.min:<float>]

# Design Options
-allow_nucleotide_repeat True
# Note: Allowing nucleotide repeats allows the MCTS to be more efficient but may make synthesis more difficult
-restriction_sites GTGTCGT, AGCUG
# Note: These are sequences you want to avoid within the mRNA. Make sure these sites are NOT inside the UTRs because ribotree will not check outside the sequences being optimized.

# Folding engine options
-package eternafold
# Note: Recommened to use eternafold. Otherwise second-best option is vienna.
-linearfold True
# Note: Recommended to use linearfold since it greatly speeds up the MCTS

# I/O options
-stride 10
# Note: How often ribotree will intermittently save an output of the current best sequence. Larger values will save less-frequently. Recommended 10.
-output ./output
# Note: Where the output files are saved. 
-verbose True
# Note: Prints out what the MCTS is doing while it is running. Only if you want to see what is happening under the hood.

# MCTS parameters
-T 3.3
# Note: Temperature for accepting moves. Smaller values is more strict. Recommended to use a value around 3 or smaller (maybe even 0.1 or 0.001 if optimizing a large sequence).
-num_mutate 1
# Note: Number of mutations made to the mRNA per move. I usually run with just 1 but you can run it with a larger value. I never tested large values > 10.
-n_iter 100
# Note: Number of nodes to create in the MCTS. Typically I make the value too large (e.g. 100000) because even if my job times out on the cluster I have a file containing the running best solutions (from stride).
-c_const 10
# Note: The C constant in the UCT1 formula. Must be a float (0, inf) or -1. If -1, MCTS will become a linear Monte Carlo search.
-beam True
# Note: Run a beam MCTS. Important to include this flag since it helps the MCTS prune itself during the search.
-scale 1
# Note: Scaling factor for MCTS evaluation. Larger values favors depth but avoid making scale > 10 due to potential overflow errors.
-n_children 10
# Note: Number of children to create for each node. Larger is always better. I typically run with 6 children but would be better to run with 10+ children. Since the children creation is optimized using multiprocessing package, make sure enough 
resources are given to each job.

# etc
-seed 271828
# Note: Seed ONLY affects the initial sequence generation when given an amino acid sequence. If you start with an RNA sequence this flag doesn't matter.